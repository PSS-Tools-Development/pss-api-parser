"""
    This file has been generated automatically
"""

from datetime import datetime as _datetime
from typing import Any as _Any, Dict as _Dict, List as _List

import pssapi.entities as _entities
from ...types import EntityInfo as _EntityInfo
from ...utils import parse as _parse
from ... import enums as _enums
from .entity_base_raw import EntityBaseRaw as _EntityBaseRaw


class {{ entity.name }}Raw(_EntityBaseRaw):
    XML_NODE_NAME: str = '{{ entity.xml_node_name }}'

    def __init__(self, {{ entity.name_snake_case }}_info: _EntityInfo) -> None:
        self._dict: _Dict[str, _Any] = {{ '{}' }}
{% for property in entity.properties %}
{% if property.builtin %}
        self._{{ property.name_snake_case }}: {{ property.typehint }} = _parse.pss_{{ property.type }}({{ entity.name_snake_case }}_info.pop('{{ property.name }}', None))
{% else %}
{% if property.is_int_enum %}

{% elif property.is_int_flag %}

{% elif property.is_str_enum %}

{% elif property.is_collection %}
        self._{{ property.name_snake_case }}: _List[_{{ property.typehint }}] = [_{{ property.typehint }}(child_info) for child_info in {{ entity.name_snake_case }}_info.pop('{{ property.name }}')[0].get('{{ property.name[:-1] }}', [])] if {{ entity.name_snake_case }}_info.get('{{ property.name }}') else []
{% else %}
        self._{{ property.name_snake_case }}: _{{ property.typehint }} = _{{ property.typehint }}({{ entity.name_snake_case }}_info.pop('{{ property.name }}')[0]) if {{ entity.name_snake_case }}_info.get('{{ property.name }}', []) else None
{% endif %}
{% endif %}
{% endfor %}
        super().__init__({{ entity.name_snake_case }}_info)

{% for property in entity.properties %}

    @property
{% if property.builtin %}
    def {{ property.name_snake_case }}(self) -> {{ property.typehint }}:
{% else %}
{% if property.is_collection %}
    def {{ property.name_snake_case }}(self) -> _List['_{{ property.typehint }}']:
{% else %}
    def {{ property.name_snake_case }}(self) -> '_{{ property.typehint }}':
{% endif %}
{% endif %}
        return self._{{ property.name_snake_case }}
{% endfor %}


    def _key(self):
{% if entity.properties %}
        return (         
{% for property in entity.properties %}
{% if property.builtin %}
            self.{{ property.name_snake_case }},
{% else %}
{% if property.is_collection %}
            tuple(child._key() for child in self.{{ property.name_snake_case }}),
{% else %}
            self.{{ property.name_snake_case }}._key() if self.{{ property.name_snake_case }} else None,
{% endif %}
{% endif %}
{% endfor %}
        )
{% else %}
        return tuple()
{% endif %}


    def __dict__(self):
        if not self._dict:
            self._dict = {
{% for property in entity.properties %}
{% if property.builtin %}
                '{{ property.name }}': self.{{ property.name_snake_case }},
{% else %}
{% if property.is_collection %}
                '{{ property.name }}': [dict(child) for child in self.{{ property.name_snake_case }}],
{% else %}
                '{{ property.name }}': dict(self.{{ property.name_snake_case }}) if self.{{ property.name_snake_case }} else None,
{% endif %}
{% endif %}
{% endfor %}
            }
            self._dict.update(super().__dict__())

        return self._dict