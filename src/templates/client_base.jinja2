from datetime import datetime as _datetime
from threading import Lock as _Lock

import pssapi.core as _core
import pssapi.enums as _enums
import pssapi.services as _services
import pssapi.utils as _utils


class PssApiClientBase:
    def __init__(
        self,
        device_type: '_enums.DeviceType' = None,
        language_key: '_enums.LanguageKey' = None,
        production_server: str = None
    ):
        self.__device_type: _enums.DeviceType = device_type or _enums.DeviceType.DEVICE_TYPE_ANDROID
        self.__language_key: _enums.LanguageKey = language_key or _enums.LanguageKey.ENGLISH
        self.__production_server: str = production_server or None # if it's none, it'll be checked and cached for any API call
        self.__production_server_cached: str = None
        self.__production_server_cached_at: _datetime = None
        self.__production_server_cache_lock: _Lock = _Lock()

        self._update_services()


    @property
    def device_type(self) -> '_enums.DeviceType':
        return self.__device_type

    @property
    def language_key(self) -> '_enums.LanguageKey':
        return self.__language_key

    @property
    def production_server(self) -> str:
        return self.__production_server

    @production_server.setter
    def production_server(self, value):
        self.__production_server = value
{% for service in services %}

    @property
    def {{ service.name_snake_case }}(self) -> '_service.{{ service.name }}'':
        return self.__{{ service.name_snake_case }}
{% endfor %}


    async def get_production_server(self) -> str:
        if self.__production_server:
            return self.__production_server

        with self.__production_server_cache_lock:
            utc_now = _utils.get_utc_now()
            if not self.__production_server_cached or self.__production_server_cached_at is None or (self.__production_server_cached_at - utc_now).total_seconds() >= PssApiClientBase.__PRODUCTION_SERVER_CACHE_DURATION:
                self.__production_server_cached_at = utc_now
                self.__production_server_cached = (await _core.get_production_server())
            return self.__production_server_cached


    def _update_services(self) -> None:
{% for service in services %}
        self.__{{ service.name_snake_case }}: _services.{{ service.name }} = _services.{{ service.name }}(self)
{% endfor %}
