"""
    This file has been generated automatically
"""

from datetime import datetime as _datetime
from typing import List as _List

import pssapi.entities as _entities
from ...types import EntityInfo as _EntityInfo
from ...utils import parse as _parse


class {{ entity.name }}Raw:
    XML_NODE_NAME: str = '{{ entity.xml_node_name }}'

    def __init__(self, {{ entity.name_snake_case }}_info: _EntityInfo) -> None:
{% for property in entity.properties %}
{% if property.builtin %}
        self._{{ property.name_snake_case }}: {{ property.typehint }} = _parse.pss_{{ property.type }}({{ entity.name_snake_case }}_info.get('{{ property.name }}'))
{% else %}
{% if property.is_collection %}
        self._{{ property.name_snake_case }}: _List[_{{ property.typehint }}] = [_{{ property.typehint }}(child_info) for child_info in {{ entity.name_snake_case }}_info.get('{{ property.name }}')] if {{ entity.name_snake_case }}_info.get('{{ property.name }}') else []
{% else %}
        self._{{ property.name_snake_case }}: _{{ property.typehint }} = _{{ property.typehint }}({{ entity.name_snake_case }}_info.get('{{ property.name }}')) if {{ entity.name_snake_case }}_info.get('{{ property.name }}') else None
{% endif %}
{% endif %}
{% endfor %}

{% for property in entity.properties %}

    @property
{% if property.builtin %}
    def {{ property.name_snake_case }}(self) -> {{ property.typehint }}:
{% else %}
{% if property.is_collection %}
    def {{ property.name_snake_case }}(self) -> _List[_{{ property.typehint }}]:
{% else %}
    def {{ property.name_snake_case }}(self) -> _{{ property.typehint }}:
{% endif %}
{% endif %}
        return self._{{ property.name_snake_case }}
{% endfor %}


    def __dict__(self):
        return {
{% for property in entity.properties %}
{% if property.builtin %}
            '{{ property.name }}': self.{{ property.name_snake_case }},
{% else %}
{% if property.is_collection %}
            '{{ property.name }}': [dict(child) for child in self.{{ property.name_snake_case }}],
{% else %}
            '{{ property.name }}': dict(self.{{ property.name_snake_case }}),
{% endif %}
{% endif %}
{% endfor %}
        }


    def __iter__(self):
        for key, value in self.__dict__().items():
            yield key, value