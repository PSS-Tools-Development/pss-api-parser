import functools as _functools
from typing import Any as _Any, Callable as _Callable, Dict as _Dict

import pssapi.client as _client
import pssapi.enums as _enums


class ServiceBase(object):
    def __init__(self, client: _client.PssApiClient) -> None:
        if not client:
            raise ValueError('The parameter \'client\' must not be None.')
        self.__client = client

    @property
    def client(self) -> _client.PssApiClient:
        return self.__client

    @property
    def language_key(self) -> _enums.LanguageKey:
        return self.client.language_key


    async def get_production_server(self) -> str:
        return (await self.client.get_production_server())





class CacheableServiceBase(ServiceBase):
    def __init__(self, client: _client.PssApiClient, enable_endpoint_cache: bool = True) -> None:
        super().__init__(client)
        self._SERVICE_CACHE: _Dict[str, _Dict[int, _Any]] = {}
        self._enable_endpoint_cache: bool = enable_endpoint_cache or False





def cache_endpoint(version_property_name: str):
    def decorator_endpoint_cache(func: _Callable):
        @_functools.wraps(func)
        async def wrapper_endpoint_cache(self, *args, **kwargs):
            if isinstance(self, CacheableServiceBase) and self._enable_endpoint_cache:
                endpoint_name = func.__name__
                cache = self._SERVICE_CACHE
                latest_version = await self.client.get_latest_version()
                endpoint_data_version = latest_version.__dict__().get(version_property_name)
                data = cache.get(endpoint_name, {}).get(endpoint_data_version)
                if not data:
                    data = await func(self, *args, **kwargs)
                    cache.setdefault(endpoint_name, {})[endpoint_data_version] = data
                return data
            else:
                return await func(*args, **kwargs)
        return wrapper_endpoint_cache
    return decorator_endpoint_cache